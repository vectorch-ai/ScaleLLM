name: Build

on:
  push:
    paths:
      - "src/**"
      - "third_party/**"
      - "cmake/**"
      - "scalellm/**/*.cpp"
      - "scalellm/**/*.h"
      - "**/CMakeLists.txt"
      - ".github/workflows/build.yml"
      - "vcpkg.json"
    branches:
      - main

  pull_request:
    paths:
      - "src/**"
      - "third_party/**"
      - "cmake/**"
      - "scalellm/**/*.cpp"
      - "scalellm/**/*.h"
      - "**/CMakeLists.txt"
      - ".github/workflows/build.yml"
      - "vcpkg.json"
    branches:
      - main

  workflow_dispatch:

# cancel all previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-gcc:
    strategy:
      matrix:
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        build_type: [Release]

    runs-on: [self-hosted, linux, gpu]

    env:
        BUILD_TYPE: ${{ matrix.build_type }}
        # Tells vcpkg where binary packages are stored.
        VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/../../ci_cache/.vcpkg/bincache
        # Tells ccache where to store its cache.
        CCACHE_DIR: ${{ github.workspace }}/../../ci_cache/.ccache
        # Tells where to store the dependencies.
        DEPENDENCES_ROOT: ${{ github.workspace }}/../../ci_cache/.deps

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Create cache directory
      run: |
        mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        mkdir -p $CCACHE_DIR
        mkdir -p $DEPENDENCES_ROOT

    - name: CMake Build in the 'build' subdirectory
      timeout-minutes: 60
      run: |
        ./tools/run_in_docker.sh -ni ccache -M 25Gi
        ./tools/run_in_docker.sh -ni cmake -G Ninja -S . -B build
        ./tools/run_in_docker.sh -ni cmake --build build --config ${{env.BUILD_TYPE}} --target all

    # - name: benchmark
    #   if: ${{ env.BUILD_TYPE == 'Release' }}
    #   run: ./build/src/benchmark/micro_benchmark

    - name: Run unit tests
      timeout-minutes: 10
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      run: ../tools/run_in_docker.sh -ni ctest --output-on-failure -C ${{env.BUILD_TYPE}}
